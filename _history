{"entries":[{"timestamp":1739259638703,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"// Set up radio communication\nradio.setGroup(1);\n\nconst REQUEST_NUMBER_MSG = \"REQUEST\";\nconst ASSIGN_NUMBER_MSG = \"ASSIGN\";\nconst START_ANIMATION_MSG = \"START\";\nconst DISPLAY_COORDS_MSG = \"DISPLAY_COORDS\";\nconst CLEAR_SCREEN_MSG = \"CLEAR_SCREEN\"; // New message for clearing all screens\n\nlet screen_number = -1;\nlet number_of_screens = 1;\nlet isMaster = false;\nlet showNumber = true;\n\n// Define an entity to represent the moving point with jumping mechanics\nclass Entity {\n    x: number;\n    y: number;\n    direction: boolean;\n    velocityY: number; // Controls vertical movement\n\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n        this.direction = true; // Direction: true for right, false for left\n        this.velocityY = 0; // No initial vertical movement\n    }\n\n    move() {\n        // Horizontal movement\n        if (this.direction) {\n            if (this.x < 5 * number_of_screens - 1) {\n                this.x++;\n            } else {\n                this.direction = false; // Change direction to left\n                this.jump(); // Jump at the right edge\n            }\n        } else {\n            if (this.x > 0) {\n                this.x--;\n            } else {\n                this.direction = true; // Change direction to right\n                this.jump(); // Jump at the left edge\n            }\n        }\n\n        // Apply gravity and jumping mechanics\n        this.y += this.velocityY;\n        this.velocityY += 1; // Gravity effect\n\n        // Bounce off the ground and ceiling\n        if (this.y >= 4) {\n            this.y = 4;\n            this.velocityY = -2; // Bounce up when hitting the ground\n        } else if (this.y <= 0) {\n            this.y = 0;\n            this.velocityY = 1; // Start falling down after reaching the top\n        }\n    }\n\n    jump() {\n        if (this.y === 4) { // Jump only if on the ground\n            this.velocityY = -3; // Initial upward velocity\n        }\n    }\n}\n\nlet entity = new Entity(0, 4); // Create the entity starting at position (0, 4)\n\n// Function to map global coordinates to local coordinates based on the screen number\nfunction mapToLocalCoordinates(globalX: number, globalY: number): { x: number, y: number } {\n    let localX = globalX - 5 * screen_number;\n    let localY = Math.min(4, Math.max(0, globalY)); // Constrain y between 0 and 4\n    return { x: localX, y: localY };\n}\n\n// When button A is pressed, make this Micro:bit the master\ninput.onButtonPressed(Button.A, function () {\n    if (screen_number === -1) {\n        isMaster = true;\n        screen_number = 0;\n        basic.showNumber(screen_number);\n    }\n});\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedMessage) {\n    if (receivedMessage === REQUEST_NUMBER_MSG && isMaster) {\n        radio.sendString(ASSIGN_NUMBER_MSG + number_of_screens);\n        number_of_screens++;\n    }\n\n    if (receivedMessage.indexOf(ASSIGN_NUMBER_MSG) === 0 && screen_number === -1) {\n        screen_number = parseInt(receivedMessage.substr(ASSIGN_NUMBER_MSG.length));\n        basic.showNumber(screen_number);\n    }\n\n    // Start animation\n    if (receivedMessage === START_ANIMATION_MSG) {\n        showNumber = false;\n        basic.clearScreen();\n    }\n\n    // Display coordinates on the respective screen\n    if (receivedMessage.indexOf(DISPLAY_COORDS_MSG) === 0) {\n        let coords = receivedMessage.substr(DISPLAY_COORDS_MSG.length);\n        let [x, y] = coords.split(\",\").map(val => parseInt(val, 10));\n\n        // Map global coordinates to local coordinates\n        const localCoords = mapToLocalCoordinates(x, y);\n\n        // Check if the mapped coordinates are valid (0-4)\n        if (localCoords.x >= 0 && localCoords.x <= 4 && localCoords.y >= 0 && localCoords.y <= 4) {\n            led.plot(localCoords.x, localCoords.y); // Plot the point\n        }\n    }\n\n    // Clear the screen on all devices\n    if (receivedMessage === CLEAR_SCREEN_MSG) {\n        basic.clearScreen();\n    }\n});\n\n// Slaves request screen number if they don't have one\nbasic.forever(function () {\n    if (screen_number === -1) {\n        radio.sendString(REQUEST_NUMBER_MSG);\n    }\n    basic.pause(500);\n});\n\n// Master starts animation when button B is pressed\ninput.onButtonPressed(Button.B, function () {\n    if (isMaster) {\n        radio.sendString(START_ANIMATION_MSG);\n        showNumber = false;\n        basic.clearScreen();\n        entity = new Entity(0, 4); // Reset position of the entity\n\n        // Animate movement\n        basic.forever(function () {\n            // Send clear screen message to all devices before updating\n            radio.sendString(CLEAR_SCREEN_MSG);\n\n            // **Clear screen 0 explicitly** if it's the master, to ensure no trails\n            if (screen_number === 0) {\n                basic.clearScreen();\n            }\n\n            // Move the entity\n            entity.move();\n\n            // Send the entity's global coordinates to all screens\n            let message = DISPLAY_COORDS_MSG + entity.x + \",\" + entity.y;\n            radio.sendString(message);\n\n            // Plot the entity only on the correct screen\n            for (let i = 0; i < number_of_screens; i++) {\n                const localCoords = mapToLocalCoordinates(entity.x, entity.y);\n\n                if (screen_number === i) {\n                    // Plot only on the correct screen\n                    if (localCoords.x >= 0 && localCoords.x <= 4 && localCoords.y >= 0 && localCoords.y <= 4) {\n                        led.plot(localCoords.x, localCoords.y);\n                    }\n                }\n            }\n\n            basic.pause(200); // Wait 150ms before updating the position again\n        });\n    }\n});"],[0,"\n"]],"start1":0,"start2":0,"length1":5681,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":237,"start2":237,"length1":32,"length2":31}]}]},{"timestamp":1739260231686,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":114}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"// Wait "],[-1,"20"],[1,"15"],[0,"0ms befo"]],"start1":5610,"start2":5610,"length1":18,"length2":18}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":232,"start2":232,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1739259638702,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"MSFW-trying-5\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[{"id":"81975-30141-59810-61296","timestamp":1739260251830}],"lastSaveTime":1739260499279}